{
  "name": "Humid",
  "author": "https://github.com/frou",

  "variables": {
    "black": "#000000",
    "blue": "#5a70a9",
    "gold": "#ad9361",
    "green": "#6a8856",
    "grey": "#3f3938",
    "grey_light": "#4f4d4d",
    "orange": "#ae7337",
    "orange_punchy": "#ff8000",
    "purple": "#995a64",
    "purple_punchy": "#fe3bff",
    "red": "#b75b4e",
    "red_punchy": "#bb0000",
    "slate": "#211e1e",
    "slate_light": "#60605a",
    "steel": "#8c8c99",
    "white": "#ffffff",
    "white_faded": "#dadada",
    "yellow_punchy": "#eed600",

    // Overrule ST where it picks what I feel is the wrong colour from the
    // above to be a given `*ish` colour.
    //
    // REF: https://www.sublimetext.com/docs/minihtml.html#predefined_variables
    "--redish": "var(red)",
    //"--greenish": "var()",
    //"--bluish": "var()",
    "--yellowish": "var(gold)",
    //"--pinkish": "var()",
    "--cyanish": "var(steel)",
    //"--orangish": "var()",
    "--purplish": "var(purple)",
    //"--foreground": "var()",
    //"--background": "var()",
    //"--accent": "var()",
  },

  // REF: https://www.sublimetext.com/docs/3/color_schemes.html#global_settings
  "globals": {
    "foreground": "var(white_faded)",
    "background": "var(slate)",

    "caret": "var(white)",

    "invisibles": "var(grey_light)",

    "line_highlight": "var(grey)",

    "selection": "var(grey)",
    "selection_border": "var(grey)",
    "selection_corner_style": "square",

    "gutter": "var(slate)",
    "gutter_foreground": "var(slate_light)",

    "find_highlight_foreground": "var(black)",
    "find_highlight": "var(yellow_punchy)",

    "brackets_options": "glow",
    "brackets_foreground": "var(orange_punchy)",

    "bracket_contents_options": "glow",
    "bracket_contents_foreground": "var(orange_punchy)",

    "tags_options": "glow",
    "tags_foreground": "var(orange_punchy)",

    "line_diff_added": "var(green)",
    "line_diff_modified": "var(orange)",
    "line_diff_deleted": "var(red)",

    "misspelling": "var(red_punchy)",
    // "fold_marker": "var(white)",
    "accent": "var(blue)",
  },

  // NOTE: Operator precedence (descending) in scope selectors:
  //   ( )  Grouping
  //   &    Intersection
  //   -    Asymmetric Difference (Relative Complement)
  //   |    Union
  //   ,    Comma
  //
  // REF: https://stackoverflow.com/questions/33562253/sublime-text-scope-selector-operators
  // REF: https://www.sublimetext.com/docs/selectors.html
  //
  // By convention, use comma (lowest precedence) to separate different
  // languages in a scope selector.
  //
  "rules": [
    // ~~~~~~~
    // Comment
    // ~~~~~~~
    {
      "scope": "comment - (source.clojure comment.punctuation)",
      "foreground": "var(slate_light)"
    },
    {
      // Preprocessor Directives (or equivalent comment constructs)
      "scope": "source.ocaml meta.preprocessor , source.go comment.line meta.annotation",
      "foreground": "var(slate_light)",
      "background": "var(black)"
    },
    // ~~~~~~~~
    // Constant
    // ~~~~~~~~
    {
      "scope": "constant",
      "foreground": "var(red)"
    },
    {
      // Stuff that isn't misclassified, but I want it to have the same colour as `constant`, just because.
      "scope": "text.build-results markup.pointing-carets , text.genshi-xml & (punctuation.section.interpolation.begin | punctuation.section.interpolation.end)",
      "foreground": "var(red)"
    },
    // ~~~~~~
    // Entity
    // ~~~~~~
    {
      "scope": "entity - (source.c++ entity.name.function punctuation.accessor , source.go entity.name.namespace)",
      "foreground": "var(orange)"
    },
    // ~~~~~~~
    // Invalid
    // ~~~~~~~
    {
      "scope": "invalid",
      "background": "var(red_punchy)",
      "foreground": "var(white_faded)"
    },
    // ~~~~~~~
    // Keyword
    // ~~~~~~~
    {
      "scope": "keyword - keyword.operator , keyword.operator.word , source.python keyword.operator.logical , source.clojure keyword.operator.macro.dispatch",
      "foreground": "var(green)"
    },
    {
      // Stuff I feel should be classified as `keyword` but I don't control the syntax definitions. Make them look like it at least.
      "scope": "source.python storage.modifier - storage.modifier.conversion",
      "foreground": "var(green)"
    },
    {
      // Stuff that isn't misclassified, but I want it to have the same colour as `keyword`, just because.
      "scope": "source.clojure support.function.def-like , source.css support.constant , source.ocaml variable.language , source.makefile variable.language.automatic",
      "foreground": "var(green)"
    },
    // ~~~~~~
    // Markup
    // ~~~~~~
    {
      "scope": "markup",
      "foreground": "var(steel)"
    },
    {
      // Stuff I feel should be classified as `markup` but I don't control the syntax definitions. Make them look like it at least.
      "scope": "source string constant.other.placeholder",
      "foreground": "var(steel)"
    },
    {
      // Stuff that isn't misclassified, but I want it to have the same colour as `markup`, just because.
      "scope": "source.ocaml & (keyword.operator | variable.parameter.label) , source.clojure constant.other.keyword , source.json.sublime.color-scheme meta.scope-selector.sublime & (keyword.operator | punctuation.section.group) , source.css meta.selector & (entity.other.attribute-name.class | entity.other.pseudo-class) , meta.diff",
      "foreground": "var(steel)"
    },
    // ~~~~~~~
    // Storage
    // ~~~~~~~
    {
      "scope": "storage",
      "foreground": "var(gold)"
    },
    {
      // Stuff I feel should be classified as `storage` but I don't control the syntax definitions. Make them look like it at least.
      "scope": "source.python & ((meta.function.parameters.annotation | meta.function.annotation.return) & (meta.generic-name | support.type) | meta.statement.exception.catch support.type.exception | meta.function.annotation.return constant.language | meta.class.inheritance entity.other.inherited-class) , source.c support.type , source.go meta.type entity.other.inherited-class , source.ts & (variable.type.js | support.class.js - meta.function-call.method.js)",
      "foreground": "var(gold)"
    },
    {
      // Stuff that isn't misclassified, but I want it to have the same colour as `storage`, just because.
      "scope": "source.css meta.selector & (entity.name.tag | entity.other.pseudo-element) , source.clojure meta.path.js",
      "foreground": "var(gold)"
    },
    // ~~~~~~
    // String
    // ~~~~~~
    {
      "scope": "string",
      "foreground": "var(blue)"
    },
    {
      // Stuff I feel should be classified as `string` but I don't control the syntax definitions. Make them look like it at least.
      "scope": "source.shell.bash meta.string meta.interpolation",
      "foreground": "var(blue)"
    },
    // ~~~~~~~
    // Support
    // ~~~~~~~
    {
      "scope": "support - (source.go support.type.builtin , source.python entity.name.function , source.ts & (support - support.function))",
      "foreground": "var(purple)"
    },
    {
      // Stuff I feel should be classified as `support` but I don't control the syntax definitions. Make them look like it at least.
      "scope": "source variable.function , source.python variable.annotation , source.shell.bash constant.language.shebang",
      "foreground": "var(purple)"
    },
    {
      // Stuff that isn't misclassified, but I want it to have the same colour as `support`, just because.
      "scope": "(source.json | source.ini) & meta.mapping.key string",
      "foreground": "var(purple)"
    },

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // File Paths and Line Numbers
    //   - Find Results panel
    //   - LSP panels
    //     - Diagnostics
    //     - References
    //   - Build Results panel
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "text.find-in-files & (entity.name.filename | constant.numeric.line-number.match) , output.lsp & (entity.name.filename | constant.numeric.line-number | constant.numeric.col-number) , text.build-results markup.location.build-results", "foreground": "var(steel)", "selection_foreground": "var(yellow_punchy)"},
    {"scope": "text.find-in-files constant.numeric.line-number", "foreground": "var(grey)"}, // "Context" lines

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Insertions and Deletions
    //   - Stock diffs
    //   - Override Audit diffs
    //   - https://github.com/SublimeText/UnitTesting results panel
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "markup.inserted", "foreground": "var(green)"},
    {"scope": "markup.deleted",  "foreground": "var(red)"},

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Results / Diagnostics
    // - Build Results panel
    // - LSP Diagnostics
    //   - REF: https://lsp.sublimetext.io/customization/#diagnostics
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "markup.error",                    "foreground": "var(red)"},
    {"scope": "markup.warning",                  "foreground": "var(gold)"},
    {"scope": "markup.note",                     "foreground": "var(blue)"},
    {"scope": "markup.info | markup.info.hint",  "foreground": "var(white_faded)"},
    {"scope": "meta.error-header.build-results", "background": "var(black)"},

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // LSP: "Signature Help" popup (distinct from AutoComplete)
    // REF: https://lsp.sublimetext.io/customization/#signature-help
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "entity.name.function.sighelp.lsp", "foreground": "var(steel)"}, // Function name & inactive parameters
    {"scope": "variable.parameter.sighelp.lsp",   "foreground": "var(white_faded)"}, // Active parameter(s)

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // LSP: Other visible occurences of the thing at the caret
    // REF: https://lsp.sublimetext.io/customization/#document-highlights
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "markup.highlight.text.lsp",  "foreground": "var(white_faded)"},
    {"scope": "markup.highlight.read.lsp",  "foreground": "var(white_faded)"},
    {"scope": "markup.highlight.write.lsp", "foreground": "var(white_faded)"},

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Empirically, ST3's rendering produces slightly different colours to the
    // #rrggbb values defined by this colour scheme. The combination of the
    // "HumidTest.sublime-syntax" file and the following allows us to easily use
    // an eyedropper tool on the "HumidTest.txt" file, to find out the values of
    // the *actual* colours that we're used to seeing.
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "black.humidtest", "foreground": "var(black)"},
    {"scope": "blue.humidtest", "foreground": "var(blue)"},
    {"scope": "gold.humidtest", "foreground": "var(gold)"},
    {"scope": "green.humidtest", "foreground": "var(green)"},
    {"scope": "grey.humidtest", "foreground": "var(grey)"},
    {"scope": "grey_light.humidtest", "foreground": "var(grey_light)"},
    {"scope": "orange.humidtest", "foreground": "var(orange)"},
    {"scope": "orange_punchy.humidtest", "foreground": "var(orange_punchy)"},
    {"scope": "purple.humidtest", "foreground": "var(purple)"},
    {"scope": "purple_punchy.humidtest", "foreground": "var(purple_punchy)"},
    {"scope": "red.humidtest", "foreground": "var(red)"},
    {"scope": "red_punchy.humidtest", "foreground": "var(red_punchy)"},
    {"scope": "slate.humidtest", "foreground": "var(slate)"},
    {"scope": "slate_light.humidtest", "foreground": "var(slate_light)"},
    {"scope": "steel.humidtest", "foreground": "var(steel)"},
    {"scope": "white.humidtest", "foreground": "var(white)"},
    {"scope": "white_faded.humidtest", "foreground": "var(white_faded)"},
    {"scope": "yellow_punchy.humidtest", "foreground": "var(yellow_punchy)"},
  ]
}
