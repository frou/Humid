{
  "name": "Humid",
  "author": "https://github.com/frou",
  "variables": {
    "black": "#000000",
    "blue": "#5a70a9",
    "gold": "#ad9361",
    "green": "#6a8856",
    "grey": "#3f3938",
    "grey_light": "#4f4d4d",
    "orange": "#ae7337",
    "orange_punchy": "#ff8000",
    "purple": "#995a64",
    "red": "#b75b4e",
    "red_punchy": "#bb0000",
    "slate": "#211e1e",
    "slate_light": "#60605a",
    "steel": "#8c8c99",
    "white": "#ffffff",
    "white_faded": "#dadada",
    "yellow_punchy": "#eed600"
  },
  "globals": {
    "foreground": "var(white_faded)",
    "background": "var(slate)",
    "caret": "var(white)",
    "invisibles": "var(grey_light)",
    "line_highlight": "var(grey)",
    "selection": "var(grey)",
    "gutter": "var(slate)",
    "gutter_foreground": "var(slate_light)",
    "active_guide": "var(gold)",
    "find_highlight_foreground": "var(black)",
    "find_highlight": "var(yellow_punchy)",
    "brackets_options": "underline",
    "brackets_foreground": "var(orange_punchy)",
    "bracket_contents_options": "underline",
    "bracket_contents_foreground": "var(orange_punchy)",
    "tags_options": "underline",
    "tags_foreground": "var(orange_punchy)"
  },
  "rules": [
    {
      "name": "Comment",
      "scope": "comment - ( source.clojure comment.punctuation )",
      "foreground": "var(slate_light)"
    },
    {
      "name": "Comment (reclassification)",
      "scope": "text.find-in-files constant.numeric.line-number.match",
      "foreground": "var(slate_light)"
    },
    {
      "name": "Constant",
      "scope": "constant - ( source.java constant.other )",
      "foreground": "var(red)"
    },
    {
      "name": "Entity",
      "scope": "entity - ( source.c++ entity.name.function punctuation.accessor )",
      "foreground": "var(orange)"
    },
    {
      "name": "Invalid",
      "scope": "invalid",
      "background": "var(red_punchy)"
    },
    {
      "name": "Keyword",
      "scope": "keyword - ( source.c keyword.operator - ( keyword.operator.word ), source.c++ keyword.operator - ( keyword.operator.word ), source.clojure keyword.operator.macro, source.erlang keyword.operator - ( keyword.operator.word ), source.glsl keyword.operator, source.go keyword.operator, source.java keyword.operator, source.js keyword.generator, source.js keyword.operator - ( keyword.operator.word ), source.python keyword.operator - ( keyword.operator.logical ), source.shell.bash keyword.operator, source.swift keyword.operator, source.ts keyword.operator - ( keyword.operator.expression, keyword.operator.new ) ), source.clojure storage.modifier, source.clojure storage.type, source.go storage.type.keyword, source.java storage.modifier - ( source.java storage.modifier.array ), source.java storage.type.var, source.java meta.class.identifier storage.type, source.js variable.language.super, source.js variable.language.this, source.ts meta.var.expr storage.type, source.ts storage.modifier, source.ts storage.type.class, source.ts storage.type.enum, source.ts storage.type.function, source.ts storage.type.interface, source.ts variable.language.super, source.ts variable.language.this",
      "foreground": "var(green)"
    },
    {
      "name": "Markup",
      "scope": "markup, string constant.other.placeholder, source.clojure constant.other.keyword, source.erlang constant.other.symbol, source.erlang constant.language.exception.type, source.java meta.annotation, source.js meta.template.expression, source.ts string.template meta.embedded",
      "foreground": "var(steel)"
    },
    {
      "name": "Markup (reclassification)",
      "scope": "text.find-in-files entity.name.filename",
      "foreground": "var(steel)"
    },
    {
      "name": "Storage",
      "scope": "storage - ( source.ts storage.type.function.arrow ), source.java meta.instantiation support.class, source.java meta.method.parameters support.class, source.java meta.catch.parameters support.class, source.java support.class.import, source.swift support.class, source.ts entity.name.type - ( entity.name.type.class, entity.name.type.enum, entity.name.type.interface ), source.ts support.type",
      "foreground": "var(gold)"
    },
    {
      "name": "String",
      "scope": "string",
      "foreground": "var(blue)"
    },
    {
      "name": "Support",
      "scope": "support - ( source.erlang support.namespace, source.go support.type.builtin, source.java support.class, source.java support.type.package, source.js support.class, source.js support.constant, source.js support.module, source.js support.type, source.python entity.name.function, source.swift entity.name.type, source.ts support.class, source.ts support.constant, source.ts support.variable.property ), source.go meta.type entity.other.inherited-class, source.json meta.mapping.key string.quoted, source.ts meta.function-call entity.name.function",
      "foreground": "var(purple)"
    },
    {
      "name": "Variable (Function)",
      "scope": "variable.function",
      "foreground": "var(purple)"
    },
    {
      "name": "Diff insertion",
      "scope": "markup.inserted",
      "foreground": "var(green)"
    },
    {
      "name": "Diff deletion",
      "scope": "markup.deleted",
      "foreground": "var(red)"
    },
    {
      "name": "Diff metadata",
      "scope": "meta.diff",
      "foreground": "var(slate_light)"
    },
    {
      "name": "Diff filename",
      "scope": "meta.diff.header.to-file",
      "foreground": "var(orange)"
    },
    {
      "name": "Build Results Error Prefix",
      "scope": "message.error",
      "foreground": "var(red)"
    },
    {
      "name": "Build Results Warning Prefix",
      "scope": "message.warning",
      "foreground": "var(gold)"
    },
    {
      "name": "Build Results Note Prefix",
      "scope": "message.note",
      "foreground": "var(purple)"
    }
  ]
}
