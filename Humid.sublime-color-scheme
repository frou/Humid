{
  "name": "Humid",
  "author": "https://github.com/frou",

  "variables": {
    "black": "#000000",
    "blue": "#5a70a9",
    "gold": "#ad9361",
    "green": "#6a8856",
    "grey": "#3f3938",
    "grey_light": "#4f4d4d",
    "orange": "#ae7337",
    "orange_punchy": "#ff8000",
    "purple": "#995a64",
    "purple_punchy": "#fe3bff",
    "red": "#b75b4e",
    "red_punchy": "#bb0000",
    "slate": "#211e1e",
    "slate_light": "#60605a",
    "steel": "#8c8c99",
    "white": "#ffffff",
    "white_faded": "#dadada",
    "yellow_punchy": "#eed600"
  },

  "globals": {
    "foreground": "var(white_faded)",
    "background": "var(slate)",
    "caret": "var(white)",
    "invisibles": "var(grey_light)",
    "line_highlight": "var(grey)",
    "selection": "var(grey)",
    "gutter": "var(slate)",
    "gutter_foreground": "var(slate_light)",
    "find_highlight_foreground": "var(black)",
    "find_highlight": "var(yellow_punchy)",
    "brackets_options": "foreground",
    "brackets_foreground": "var(orange_punchy)",
    "bracket_contents_options": "foreground",
    "bracket_contents_foreground": "var(orange_punchy)",
    "tags_options": "foreground",
    "tags_foreground": "var(orange_punchy)",

    "line_diff_added": "var(green)",
    "line_diff_modified": "var(orange)",
    "line_diff_deleted": "var(red)",

    // @todo #0 Use glow for brackets/tags once on ST4

    // "brackets_options": "glow",
    // "brackets_foreground": "var(yellow_punchy)",
    // "bracket_contents_options": "glow",
    // "bracket_contents_foreground": "var(yellow_punchy)",
    // "tags_options": "glow",
    // "tags_foreground": "var(orange_punchy)"

  },

  // @todo #0 Use comma operator as well as pipe, to emphasise language splits in long selector
  //  expressions. Comma has lower precedence than pipe:
  //  https://stackoverflow.com/questions/33562253/sublime-text-scope-selector-operators
  "rules": [
    // ~~~~~~~
    // Comment
    // ~~~~~~~
    {
      "name": "Comment",
      "scope": "comment - (source.clojure comment.punctuation)",
      "foreground": "var(slate_light)"
    },
    {
      "name": "Preprocessor Directives / Equivalent Comments",
      "scope": "source.ocaml meta.preprocessor | source.go comment.line meta.annotation",
      "foreground": "var(slate_light)",
      "background": "var(black)"
    },
    // ~~~~~~~~
    // Constant
    // ~~~~~~~~
    {
      "name": "Constant",
      "scope": "constant - (source.java constant.other)",
      "foreground": "var(red)"
    },
    {
      "name": "Stuff I want to be this colour, just because",
      "scope": "text.build-results markup.pointing-carets",
      "foreground": "var(red)"
    },
    // ~~~~~~
    // Entity
    // ~~~~~~
    {
      "name": "Entity",
      "scope": "entity - (source.c++ entity.name.function punctuation.accessor | source.python meta.class.inheritance)",
      "foreground": "var(orange)"
      // @todo #0 Use glow for entity once on ST4
    },
    // ~~~~~~~
    // Invalid
    // ~~~~~~~
    {
      "name": "Invalid",
      "scope": "invalid",
      "background": "var(red_punchy)"
    },
    // ~~~~~~~
    // Keyword
    // ~~~~~~~
    {
      "name": "Keyword",
      "scope": "keyword - keyword.operator | keyword.operator.word | source.python keyword.operator.logical | source.ts & (keyword.operator.expression | keyword.operator.new) | source.clojure keyword.operator.macro.dispatch",
      "foreground": "var(green)"
    },
    {
      "name": "Keyword [reclassification of syntax definitions I don't control]",
      "scope": "source.go storage.type.keyword | source.java & ((storage.modifier - storage.modifier.array) | storage.type.var | meta.class.identifier storage.type) | source.js & (storage.type | variable.language.super | variable.language.this) | source.ts & (meta.var.expr storage.type | storage.modifier | storage.type.class | storage.type.enum | storage.type.function | storage.type.interface | variable.language.super | variable.language.this) | source.python & (storage.type.function | storage.type.class) | source.python storage.modifier - storage.modifier.conversion | source.shell.bash storage.modifier",
      "foreground": "var(green)"
    },
    {
      "name": "Stuff I want to be this colour, just because",
      "scope": "source.clojure support.function.def-like | source.css support.constant",
      "foreground": "var(green)"
    },
    // ~~~~~~
    // Markup
    // ~~~~~~
    {
      "name": "Markup",
      "scope": "markup",
      "foreground": "var(steel)"
    },
    {
      "name": "Markup [reclassification of syntax definitions I don't control]",
      "scope": "source string constant.other.placeholder | source.java meta.annotation | source.js meta.template.expression | source.ts meta.embedded string.template",
      "foreground": "var(steel)"
    },
    {
      "name": "Stuff I want to be this colour, just because",
      "scope": "source.ocaml & (keyword.operator | variable.parameter.label) | source.clojure constant.other.keyword | source.erlang & (constant.other.symbol | constant.language.exception.type) | source.json.sublime.color-scheme meta.scope-selector.sublime & (keyword.operator | punctuation.section.group) | source.elm meta.type-annotation | source.python meta.annotation | source.css meta.selector & (entity.other.attribute-name.class | entity.other.pseudo-class)",
      "foreground": "var(steel)"
    },
    // ~~~~~~~
    // Storage
    // ~~~~~~~
    {
      "name": "Storage",
      "scope": "storage - (source.ts storage.type.function.arrow)",
      "foreground": "var(gold)"
    },
    {
      "name": "Storage [reclassification of syntax definitions I don't control]",
      "scope": "source.java & (support.class.import | (support.class & (meta.instantiation | meta.method.parameters | meta.catch.parameters))) | source.swift support.class | source.ts & (support.type | entity.name.type - (entity.name.type.class | entity.name.type.enum | entity.name.type.interface)) | source.python & (meta.function.parameters.annotation | meta.function.annotation.return) & (meta.generic-name | support.type) | source.python meta.statement.except & (meta.generic-name | support.type.exception) | source.python meta.function.annotation.return constant.language | source.c support.type | source.go meta.type entity.other.inherited-class | source.js & (support.class | variable.type)",
      "foreground": "var(gold)"
    },
    {
      "name": "Stuff I want to be this colour, just because",
      "scope": "source.css meta.selector & (entity.name.tag | entity.other.pseudo-element) | source.clojure meta.path",
      "foreground": "var(gold)"
    },
    // ~~~~~~
    // String
    // ~~~~~~
    {
      "name": "String",
      "scope": "string",
      "foreground": "var(blue)"
    },
    // ~~~~~~~
    // Support
    // ~~~~~~~
    {
      "name": "Support",
      "scope": "support - (source.erlang support.namespace | source.go support.type.builtin | source.java & (support.class | support.type.package) | source.js & (support.constant | support.module | support.type) | source.python entity.name.function | source.swift entity.name.type | source.ts & (support.class | support.constant | support.variable.property))",
      "foreground": "var(purple)"
    },
    {
      "name": "Support [reclassification of syntax definitions I don't control]",
      "scope": "source variable.function | source.ts meta.function-call entity.name.function",
      "foreground": "var(purple)"
    },
    {
      "name": "Stuff I want to be this colour, just because",
      "scope": "(source.json | source.ini) & meta.mapping.key string",
      "foreground": "var(purple)"
    },
    // ~~~~~~~~~~~~~
    // Miscellaneous
    // ~~~~~~~~~~~~~
    {
      "name": "DIFF: Insertion",
      "scope": "(source.diff | text.override-audit.diff) & markup.inserted",
      "foreground": "var(green)"
    },
    {
      "name": "DIFF: Deletion",
      "scope": "(source.diff | text.override-audit.diff) & markup.deleted",
      "foreground": "var(red)"
    },
    {
      "name": "DIFF: Metadata",
      "scope": "(source.diff | text.override-audit.diff) & meta",
      "foreground": "var(steel)"
    },
    {
      "name": "FIND RESULTS / LSP DIAGNOSTICS PANEL / LSP REFERENCES PANEL: File paths and line numbers",
      "scope": "text.find-in-files & (entity.name.filename | constant.numeric.line-number.match) | output.lsp.diagnostics & (meta.diagnostic.preamble string | constant.numeric.integer.decimal) | output.lsp.references & (entity.name.file | constant.numeric.integer.decimal)",
      "foreground": "var(steel)"
    },
    {
      "name": "FIND RESULTS: Line numbers of surrounding lines",
      "scope": "text.find-in-files constant.numeric.line-number",
      "foreground": "var(grey)"
    },
    {
      "name": "Stuff automatically selected when using prev_result/next_result keybindings (FIND RESULTS / BUILD RESULTS / LSP DIAGNOSTICS PANEL / LSP REFERENCES PANEL)",
      "scope": "text.find-in-files constant.numeric.line-number.match | markup.location.build-results | (output.lsp.diagnostics meta.diagnostic.body | output.lsp.references meta.reference.body) & constant.numeric.integer.decimal",
      // @todo #0 Use font_style:glow for selected error location once on ST4?
      "selection_foreground": "var(yellow_punchy)",
    },
    {
      "name": "LSP DIAGNOSTICS PANEL: Linter name",
      "scope": "output.lsp.diagnostics comment.line",
      "foreground": "var(purple)"
    },
    {
      "name": "BUILD RESULTS / LSP DIAGNOSTICS PANEL: Error",
      "scope": "text.build-results markup.error | output.lsp.diagnostics markup.error",
      "foreground": "var(red)"
    },
    {
      "name": "BUILD RESULTS / LSP DIAGNOSTICS PANEL: Warning",
      "scope": "text.build-results markup.warning | output.lsp.diagnostics markup.warning",
      "foreground": "var(gold)"
    },
    {
      "name": "BUILD RESULTS / LSP DIAGNOSTICS PANEL: Note",
      "scope": "text.build-results markup.note | output.lsp.diagnostics markup.info",
      "foreground": "var(blue)"
    },
    {
      "name": "BUILD RESULTS: Error Header",
      "scope": "meta.error-header.build-results",
      "background": "var(black)",
    },
    {
      "name": "LSP INLINE DIAGNOSTICS SQUIGGLIES AND GUTTER MARKERS",
      "scope": "markup.deleted.lsp | markup.changed.lsp | markup.inserted.lsp",
      "foreground": "var(purple_punchy)"
    },
    // ~~~~~~~~~~~~~~~~~~~~~~~~
    // "font_style"-only Tweaks
    // ~~~~~~~~~~~~~~~~~~~~~~~~
    {
      "name": "Stuff I want to be bold, just because",
      "scope": "source.ocaml meta.enum.constructor.polymorphic keyword.operator",
      "font_style": "bold"
    },
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Empirically, ST3's rendering produces slightly different colours to the
    // #rrggbb values defined by this colour scheme. The combination of the
    // "HumidTest.sublime-syntax" file and the following allows us to easily use
    // an eyedropper tool on the "HumidTest.txt" file, to find out the values of
    // the *actual* colours that we're used to seeing.
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    {"scope": "black.humidtest", "foreground": "var(black)"},
    {"scope": "blue.humidtest", "foreground": "var(blue)"},
    {"scope": "gold.humidtest", "foreground": "var(gold)"},
    {"scope": "green.humidtest", "foreground": "var(green)"},
    {"scope": "grey.humidtest", "foreground": "var(grey)"},
    {"scope": "grey_light.humidtest", "foreground": "var(grey_light)"},
    {"scope": "orange.humidtest", "foreground": "var(orange)"},
    {"scope": "orange_punchy.humidtest", "foreground": "var(orange_punchy)"},
    {"scope": "purple.humidtest", "foreground": "var(purple)"},
    {"scope": "purple_punchy.humidtest", "foreground": "var(purple_punchy)"},
    {"scope": "red.humidtest", "foreground": "var(red)"},
    {"scope": "red_punchy.humidtest", "foreground": "var(red_punchy)"},
    {"scope": "slate.humidtest", "foreground": "var(slate)"},
    {"scope": "slate_light.humidtest", "foreground": "var(slate_light)"},
    {"scope": "steel.humidtest", "foreground": "var(steel)"},
    {"scope": "white.humidtest", "foreground": "var(white)"},
    {"scope": "white_faded.humidtest", "foreground": "var(white_faded)"},
    {"scope": "yellow_punchy.humidtest", "foreground": "var(yellow_punchy)"},
  ]
}
