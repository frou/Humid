#!/usr/bin/env python3

# This script generates a version of the colour scheme intended for use in the diff pane
# part of Sublime Merge. Why is this necessary when SM can use ST colour schemes as-is?
# Because I don't want full-on programming language syntax highlighting when looking at
# diffs in SM, and it's not currently possible to disable syntax highlighting in SM.
#
# REF: https://github.com/sublimehq/sublime_merge/issues/52
# REF: https://github.com/sublimehq/sublime_merge/issues/198#issuecomment-471042729

import json
from pathlib import Path

import json5  # REF: https://github.com/spyoungtech/json-five

SCHEME_PATH = Path("Humid.sublime-color-scheme")
SMDIFF_SCHEME_PATH = Path("Humid for SM Diff.sublime-color-scheme")

with open(SCHEME_PATH) as infile:
    scheme = json5.load(infile)

scheme["name"] = f"{SMDIFF_SCHEME_PATH.stem} (GENERATED FILE - DO NOT EDIT DIRECTLY)"
scheme["variables"].update(
    {"kaleidoscope_bg_red": "#4b1512", "kaleidoscope_bg_green": "#2b4e20"}
)
existing_fg = scheme["globals"]["foreground"]
scheme["globals"]["foreground"] = f"color({existing_fg} lightness(- 40%))"
scheme["rules"] = [
    {
        "scope": "diff.deleted",
        "background": "var(slate)",
        "foreground": "color(var(white_faded) blend(var(kaleidoscope_bg_red) 60%))",
    },
    {
        "scope": "diff.deleted.char",
        "background": "var(kaleidoscope_bg_red)",
        "foreground": "var(white_faded)",
    },
    {
        "scope": "diff.inserted",
        "background": "var(slate)",
        "foreground": "color(var(white_faded) blend(var(kaleidoscope_bg_green) 60%))",
    },
    {
        "scope": "diff.inserted.char",
        "background": "var(kaleidoscope_bg_green)",
        "foreground": "var(white_faded)",
    },
]

with open(SMDIFF_SCHEME_PATH, "w") as outfile:
    json.dump(scheme, outfile, indent=2)
