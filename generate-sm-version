#!/usr/bin/env python3

# This script generates a version of the colour scheme intended for use in the diff pane
# part of Sublime Merge. Why is this necessary when SM can use ST colour schemes as-is?
# Because I don't want full-on programming language syntax highlighting when looking at
# diffs in SM, and it's not currently possible to disable syntax highlighting in SM.
#
# REF: https://github.com/sublimehq/sublime_merge/issues/52
# REF: https://github.com/sublimehq/sublime_merge/issues/198#issuecomment-471042729

import json
from pathlib import Path

import json5  # REF: https://github.com/spyoungtech/json-five

SCHEME_PATH = Path("Humid.sublime-color-scheme")
SMDIFF_SCHEME_PATH = Path("Humid for SM Diff.sublime-color-scheme")

with open(SCHEME_PATH) as infile:
    scheme = json5.load(infile)

scheme["name"] = f"{SMDIFF_SCHEME_PATH.stem} (GENERATED FILE - DO NOT EDIT DIRECTLY)"
scheme["variables"].update(
    {"kaleidoscope_red": "#4b1512", "kaleidoscope_green": "#2b4e20"}
)
st_background = scheme["globals"]["background"]
st_foreground = scheme["globals"]["foreground"]

# Wholly unchanged lines.
scheme["globals"]["foreground"] = f"color({st_foreground} lightness(- 40%))"

# For the parts of changed lines that didn't change.
def changed_line_foreground(blend_colour):
    return f"color({st_foreground} blend({blend_colour} 40%) saturation(+ 5%))"


# For the parts of changed lines that did change.
changed_line_emphasised_foreground = st_foreground

scheme["rules"] = [
    {
        "scope": "diff.deleted",
        "background": st_background,
        "foreground": changed_line_foreground("var(kaleidoscope_red)"),
    },
    {
        "scope": "diff.deleted.char",
        "background": "var(kaleidoscope_red)",
        "foreground": changed_line_emphasised_foreground,
    },
    {
        "scope": "diff.inserted",
        "background": st_background,
        "foreground": changed_line_foreground("var(kaleidoscope_green)"),
    },
    {
        "scope": "diff.inserted.char",
        "background": "var(kaleidoscope_green)",
        "foreground": changed_line_emphasised_foreground,
    },
]

with open(SMDIFF_SCHEME_PATH, "w") as outfile:
    json.dump(scheme, outfile, indent=2)
